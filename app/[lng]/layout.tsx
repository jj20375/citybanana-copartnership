import type { Metadata } from "next";
import Tmp1RootLayout from "@/layouts/template1RootLayout";
import Tmp2RootLayout from "@/layouts/template2RootLayout";
import { headers } from "next/headers";
import type { Viewport } from "next";
import { languages } from "@/i18n/i18n-settings";

import "./globals.scss";

export const viewport: Viewport = {
    width: "device-width",
    initialScale: 1,
    maximumScale: 1,
    userScalable: false,
    // Also supported by less commonly used
    // interactiveWidget: 'resizes-visual',
};

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export async function generateStaticParams() {
    return languages.map((lng) => ({ lng }));
}

function Template({ children, lang }: { children: React.ReactNode; lang: string }) {
    const referer = headers().get("host");

    if (referer === process.env.NEXT_PUBLIC_HOST_SITE) {
        // 判斷 tmp1 網域 layout
        return <Tmp1RootLayout lang={lang}>{children}</Tmp1RootLayout>;
    } else if (referer === process.env.NEXT_PUBLIC_X_SITE) {
        // 判斷 tmp2 網域 layout
        return <Tmp2RootLayout lang={lang}>{children}</Tmp2RootLayout>;
    }
    // 預設 tmp1 網域 layout
    return <Tmp1RootLayout lang={lang}>{children}</Tmp1RootLayout>;
}

export default function RootLayout({
    children,
    params: { lng },
}: Readonly<{
    children: React.ReactNode;
    params: { lng: string };
}>) {
    return <Template lang={lng}>{children}</Template>;
}
